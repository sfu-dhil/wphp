<?php

declare(strict_types=1);

/*
 * (c) 2021 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Repository;

use App\Entity\Role;
use App\Entity\TitleRole;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\Persistence\ManagerRegistry;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleRepository extends ServiceEntityRepository {
    public function __construct(ManagerRegistry $registry) {
        parent::__construct($registry, Role::class);
    }

    public function indexQuery() : Query {
        $qb = $this->createQueryBuilder('e');
        $qb->orderBy('e.name');

        return $qb->getQuery();
    }

    /**
     * Do a name search for a typeahead query.
     *
     * @return mixed
     */
    public function typeaheadQuery(string $q) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.name LIKE :q');
        $qb->orderBy('e.name');
        $qb->setParameter('q', "{$q}%");

        return $qb->getQuery()->execute();
    }

    public function titleRoleQuery(Role $role) : Query {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('tr');
        $qb->from(TitleRole::class, 'tr');
        $qb->where('tr.role = :role');
        $qb->setParameter('role', $role);
        $qb->innerJoin('tr.person', 'p');
        $qb->orderBy('p.lastName');
        $qb->addOrderBy('p.firstName');

        return $qb->getQuery();
    }

    /**
     * Count the titles in a given role.
     *
     * @throws NonUniqueResultException|NoResultException
     *
     * @return mixed
     */
    public function countTitles(Role $role) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(1)');
        $qb->andWhere('titlerole.role = :role');
        $qb->setParameter('role', $role);
        $qb->from(TitleRole::class, 'titlerole');

        return $qb->getQuery()->getSingleScalarResult();
    }
}
