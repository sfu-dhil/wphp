<?php

declare(strict_types=1);

/*
 * (c) 2021 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Repository;

use App\Entity\Source;
use App\Entity\TitleSource;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query;
use Doctrine\Persistence\ManagerRegistry;
use Nines\UserBundle\Entity\User;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SourceRepository extends ServiceEntityRepository {
    public function __construct(ManagerRegistry $registry) {
        parent::__construct($registry, Source::class);
    }

    public function indexQuery() : Query {
        $qb = $this->createQueryBuilder('s');
        $qb->orderBy('s.name');

        return $qb->getQuery();
    }

    /**
     * Counts the titles for each source, and returns an array (source.id => count).
     */
    public function countTitles() : array {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('IDENTITY(ts.source) as srcId, COUNT(DISTINCT(ts.title)) as cnt');
        $qb->from(TitleSource::class, 'ts');
        $qb->groupBy('ts.source');
        $qb->orderBy('ts.source');
        $counts = [];
        foreach ($qb->getQuery()->getResult() as $result) {
            $counts[$result['srcId']] = $result['cnt'];
        }

        return $counts;
    }

    /**
     * Execute a name search for a typeahead widget.
     *
     * @return mixed
     */
    public function typeaheadQuery(string $q) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.name LIKE :q');
        $qb->orderBy('e.name');
        $qb->setParameter('q', "{$q}%");

        return $qb->getQuery()->execute();
    }

    public function titlesQuery(Source $source, ?User $user) : Query {
    }
}
